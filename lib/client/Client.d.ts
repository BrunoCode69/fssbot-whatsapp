/// <reference types="node" />
import ConnectionConfig from '../configs/ConnectionConfig';
import Message from '../messages/Message';
import MediaMessage from '../messages/MediaMessage';
import QuickResponseController from '../modules/quickResponse/QuickResponseController';
import ChatStatus from '../modules/chat/ChatStatus';
import Chat from '../modules/chat/Chat';
import User from '../modules/user/User';
import Command from '../modules/command/Command';
import CommandController from '../modules/command/CommandController';
import ClientEvents, { ClientEventsMap } from './ClientEvents';
import IAuth from './IAuth';
import IClient from './IClient';
import IBot from '../bot/IBot';
import MessageHandler, { MessageHandlerConfig } from '../utils/MessageHandler';
import { QuickResponseOptions, QuickResponsePattern, QuickResponseReply } from '../modules/quickResponse';
import QuickResponse from '../modules/quickResponse/QuickResponse';
import AdvancedCommandController from '../modules/command/advanced/AdvancedCommandController';
import AdvancedCommand from '../modules/command/advanced/AdvancedCommand';
import Call from '../models/Call';
export default class Client<Bot extends IBot = IBot> extends ClientEvents implements IClient {
    funcHandler: any;
    commandController: CommandController;
    advancedCommandController: AdvancedCommandController;
    quickResponseController: QuickResponseController;
    messageHandler: MessageHandler;
    reconnectTimes: number;
    config: ConnectionConfig;
    bot: Bot;
    id: string;
    constructor(bot: Bot, config?: Partial<ConnectionConfig>);
    configEvents(): void;
    connect(auth: IAuth | string): Promise<void>;
    reconnect(alert?: boolean): Promise<void>;
    stop(reason?: any): Promise<void>;
    logout(): Promise<void>;
    awaitEvent<T extends keyof ClientEventsMap>(eventName: T, maxTimeout?: number): Promise<ClientEventsMap[T]>;
    awaitConnectionOpen(): Promise<void>;
    getCommandController(): CommandController;
    setCommandController(controller: CommandController): void;
    setCommands(commands: Command[]): void;
    getCommands(): Command[];
    addCommand(command: Command): void;
    removeCommand(command: Command): boolean;
    searchCommand(text: string): Command | null;
    runCommand(command: Command, message: Message, type?: string): Promise<any>;
    setAdvancedCommandController(advancedCommandController: AdvancedCommandController): void;
    getAdvancedCommandController(): AdvancedCommandController;
    setAdvancedCommands(commands: AdvancedCommand[]): void;
    getAdvancedCommands(): AdvancedCommand<object>[];
    createAdvancedCommand<T extends object>(id: string, context: T): AdvancedCommand<T>;
    addAdvancedCommand(command: AdvancedCommand): void;
    removeAdvancedCommand(command: AdvancedCommand): boolean;
    execAdvancedCommand(command: AdvancedCommand | string, message: Message): Promise<void>;
    addQuickResponse(pattern: QuickResponse): QuickResponse;
    addQuickResponse(pattern: QuickResponsePattern, reply: QuickResponseReply, options?: Partial<QuickResponseOptions>): QuickResponse;
    addQuickResponse(pattern: QuickResponsePattern[], reply: QuickResponseReply, options?: Partial<QuickResponseOptions>): QuickResponse;
    removeQuickResponse(quickResponse: QuickResponse | string): void;
    deleteMessage(message: Message): Promise<void>;
    removeMessage(message: Message): Promise<void>;
    readMessage(message: Message): Promise<void>;
    editMessage(message: Message, text: string): Promise<void>;
    addReaction(message: Message, reaction: string): Promise<void>;
    removeReaction(message: Message): Promise<void>;
    addAnimatedReaction(message: Message, reactions: string[], interval?: number, maxTimeout?: number): (reactionStop?: string) => Promise<void>;
    send(message: Message): Promise<Message>;
    sendMessage(chat: Chat | string, message: string | Message, mention?: Message): Promise<Message>;
    awaitMessage(chat: Chat | string, config?: Partial<MessageHandlerConfig>): Promise<Message>;
    downloadStreamMessage(message: MediaMessage): Promise<Buffer>;
    getBotName(): Promise<string>;
    setBotName(name: string): any;
    getBotDescription(): any;
    setBotDescription(description: string): any;
    getBotProfile(lowQuality?: boolean): any;
    setBotProfile(profile: Buffer): any;
    getChat(chat: Chat | string): Promise<Chat | null>;
    updateChat(id: string, chat: Partial<Chat>): Promise<void>;
    getChats(): Promise<Chat[]>;
    setChats(chats: Chat[]): Promise<void>;
    removeChat(chat: string | Chat): Promise<void>;
    createChat(chat: Chat): any;
    leaveChat(chat: Chat | string): any;
    getChatName(chat: Chat | string): any;
    setChatName(chat: Chat | string, name: string): any;
    getChatDescription(chat: Chat | string): any;
    setChatDescription(chat: Chat | string, description: string): any;
    getChatProfile(chat: Chat | string, lowQuality?: boolean): any;
    setChatProfile(chat: Chat | string, profile: Buffer): any;
    getChatLeader(chat: Chat | string): Promise<User>;
    getChatUsers(chat: Chat | string): Promise<string[]>;
    getChatAdmins(chat: Chat | string): Promise<string[]>;
    addUserInChat(chat: Chat | string, user: User | string): any;
    removeUserInChat(chat: Chat | string, user: User | string): any;
    promoteUserInChat(chat: Chat | string, user: User | string): any;
    demoteUserInChat(chat: Chat | string, user: User | string): any;
    changeChatStatus(chat: Chat | string, status: ChatStatus): Promise<void>;
    joinChat(code: string): Promise<void>;
    getChatInvite(chat: Chat | string): Promise<string>;
    revokeChatInvite(chat: Chat | string): Promise<string>;
    rejectCall(call: Call | string): Promise<void>;
    getUsers(): Promise<User[]>;
    getSavedUsers(): Promise<User[]>;
    setUsers(users: User[]): any;
    getUser(user: User | string): Promise<User | null>;
    updateUser(id: string, user: Partial<User>): Promise<void>;
    removeUser(user: User | string): any;
    getUserName(user: User | string): any;
    setUserName(user: User | string, name: string): any;
    getUserDescription(user: User | string): any;
    setUserDescription(user: User | string, description: string): any;
    getUserProfile(user: User | string, lowQuality?: boolean): any;
    setUserProfile(user: User | string, profile: Buffer): any;
    unblockUser(user: User | string): any;
    blockUser(user: User | string): any;
    static getClients(): Record<string, Client<IBot>>;
    static saveClients(clients: Record<string, Client<IBot>>): void;
    static getClient(id: string): Client<IBot>;
    static saveClient(client: Client<IBot>): void;
    static generateId(): string;
}
